#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('hjf.io:server');
const http = require('http');
const util = require('../util').www;

/**
 * Get port from environment and store in Express.
 */

const port = util.normalizePort(process.env.PORT || '8080');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', (error) => {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = `Port ${port}`;
  if (typeof port !== 'string') {
    bind = `Pipe ${port}`;
  }

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
});

server.on('listening', () => {
  const addr = server.address();
  let bind = `pipe ${addr}`;
  if (typeof addr !== 'string') {
    bind = `port ${addr.port}`;
  }
  debug(`Listening on ${bind}`);
});

/**
 * Normalize a port into a number, string, or false.
 */
